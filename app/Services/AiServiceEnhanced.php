<?php

namespace App\Services;

use App\Models\KnowledgeBase;
use App\Models\Settings;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Http;
use Exception;

/**
 * Enhanced AI Service with intelligent query understanding
 * Fixes the issue where "Salam d…ôst…ômaz nec…ô alƒ±nƒ±r?" doesn't work
 */
class AiServiceEnhanced extends AiService
{
    /**
     * Enhanced keyword extraction with AI-powered understanding
     * Removes greeting words and focuses on the actual question
     */
    protected function extractSmartKeywords(string $query): array
    {
        $originalQuery = $query;
        
        // Normalize and clean the query
        $query = trim(preg_replace('/\s+/u', ' ', mb_strtolower($query, 'UTF-8')));
        
        // Remove common greeting/filler words first
        $greetings = [
            'salam', 'aleykum', '…ôleykum', 'salam aleykum', '…ôss…ôlamun …ôleykum',
            'h√∂rm…ôtli', '…ôziz', 'dostum', 'qarda≈ü', 'bacƒ±', 'xanƒ±m', 'c…ônab',
            'z…ôhm…ôt olmasa', 'xahi≈ü edir…ôm', 'xai≈ü', 'l√ºtf…ôn', 'buyurun',
            'm…ôn…ô', 'biz…ô', 'ona', 's…ôn…ô', 'siz…ô', 'bunun', 'onun',
            'deyin', 'dey…ô bil…ôrsiniz', 'bil…ôrsiniz', 'olar',
            'bir', 'bu', 'o', 'n…ô', 'kim', 'harada', 'niy…ô', 'n…ô √º√ß√ºn',
            'sual', 'soru≈üuram', '√∂yr…ônm…ôk ist…ôyir…ôm', 'bilm…ôk ist…ôyir…ôm',
            'cavab verin', 'izah edin', 'g√∂st…ôrin', 'k√∂m…ôk edin',
            'var', 'yox', 'b…ôli', 'xeyr', 'h…ô', 'yox',
        ];
        
        // Remove greetings from query
        $cleanQuery = $query;
        foreach ($greetings as $greeting) {
            $cleanQuery = preg_replace('/\b' . preg_quote($greeting, '/') . '\b/u', '', $cleanQuery);
        }
        $cleanQuery = trim(preg_replace('/\s+/u', ' ', $cleanQuery));
        
        // If query became too short after cleaning, use original
        if (strlen($cleanQuery) < 3) {
            $cleanQuery = $query;
        }
        
        // Extract meaningful words
        $matches = [];
        preg_match_all('/\p{L}{2,}/u', $cleanQuery, $matches);
        $tokens = $matches[0] ?? [];
        
        // Enhanced stopwords list for Azerbaijani
        $stopwords = [
            // Azerbaijani specific
            'v…ô', 'v…ô ya', 'ki', 'da', 'd…ô', 'il…ô', '√º√ß√ºn', 'bu', 'o', 
            'bir', 'iki', '√º√ß', 'd√∂rd', 'be≈ü',
            'nec…ô', 'n…ô', 'niy…ô', 'harada', 'kim', 'n…ô vaxt', 'hansƒ±',
            'etm…ôk', 'olmaq', 'var', 'yox', 'edir', 'edir…ôm', 'edirs…ôn',
            'ist…ôyir…ôm', 'ist…ôyirs…ôn', 'bilir…ôm', 'bilirs…ôn',
            'ola', 'olur', 'olub', 'olacaq', 'idi', 'imi≈ü',
            // Question words that are too generic
            'nec…ôdir', 'n…ôdir', 'kimidir', 'hardadƒ±r',
            // Turkish/English common
            've', 'veya', 'i√ßin', 'ile', 'the', 'and', 'or', 'for', 'with',
            // Arabic/Persian particles
            'Ÿà', 'ŸÅŸä', 'ŸÖŸÜ', 'ÿπŸÑŸâ', '⁄©Ÿá', 'ÿØÿ±', 'ÿ®ÿß', 'ÿßÿ≤'
        ];
        
        // Filter out stopwords and short words
        $keywords = array_filter($tokens, function($token) use ($stopwords) {
            return !in_array($token, $stopwords, true) && mb_strlen($token, 'UTF-8') >= 3;
        });
        
        // Priority keywords for Islamic terms
        $priorityTerms = [
            'd…ôst…ômaz', 'q√ºsl', 't…ôy…ômm√ºm', 'namaz', 'oruc', 'z…ôkat', 'h…ôcc',
            'quran', 'sur…ô', 'ay…ô', 'h…ôdis', 'fiqh', '≈ü…ôri…ôt', 'h√∂km√º', 'h√∂km',
            'vacib', 's√ºnn…ôt', 'm√ºst…ôh…ôb', 'haram', 'halal', 'm…ôkruh',
            't…ôhar…ôt', 'n…ôcas…ôt', 'pak', 'murdar', 'su', 'qibl…ô'
        ];
        
        // Check for priority terms and put them first
        $finalKeywords = [];
        foreach ($keywords as $keyword) {
            foreach ($priorityTerms as $term) {
                if (mb_stripos($keyword, $term) !== false || mb_stripos($term, $keyword) !== false) {
                    $finalKeywords[] = $keyword;
                    break;
                }
            }
        }
        
        // Add remaining keywords
        foreach ($keywords as $keyword) {
            if (!in_array($keyword, $finalKeywords)) {
                $finalKeywords[] = $keyword;
            }
        }
        
        // If no keywords found, try to extract from original query
        if (empty($finalKeywords)) {
            // Last resort: get the longest words
            $allWords = explode(' ', $originalQuery);
            usort($allWords, function($a, $b) {
                return mb_strlen($b, 'UTF-8') <=> mb_strlen($a, 'UTF-8');
            });
            $finalKeywords = array_slice(array_filter($allWords, function($w) {
                return mb_strlen($w, 'UTF-8') >= 3;
            }), 0, 3);
        }
        
        // Expand keywords with common variations
        $expandedKeywords = [];
        foreach ($finalKeywords as $keyword) {
            $expandedKeywords[] = $keyword;
            
            // Add variations for common Islamic terms
            $variations = $this->getTermVariations($keyword);
            foreach ($variations as $variation) {
                if (!in_array($variation, $expandedKeywords)) {
                    $expandedKeywords[] = $variation;
                }
            }
        }
        
        Log::info('üß† ENHANCED KEYWORD EXTRACTION', [
            'original_query' => $originalQuery,
            'cleaned_query' => $cleanQuery,
            'greetings_removed' => $query !== $cleanQuery,
            'keywords_found' => count($expandedKeywords),
            'keywords' => array_slice($expandedKeywords, 0, 10),
            'priority_matches' => array_intersect($expandedKeywords, $priorityTerms)
        ]);
        
        return array_unique($expandedKeywords);
    }
    
    /**
     * Get term variations for better matching
     */
    protected function getTermVariations(string $term): array
    {
        $variations = [];
        $term = mb_strtolower($term, 'UTF-8');
        
        $variationMap = [
            // D…ôst…ômaz variations
            'd…ôst…ômaz' => ['destemaz', 'd…ôst…ômaz', 'abdest', 't…ôhar…ôt'],
            'destemaz' => ['d…ôst…ômaz', 'destemaz', 'abdest', 't…ôhar…ôt'],
            'abdest' => ['d…ôst…ômaz', 'destemaz', 'abdest', 't…ôhar…ôt'],
            
            // Namaz variations  
            'namaz' => ['salat', 'salah', 'namaz', 'ibad…ôt'],
            'salat' => ['namaz', 'salat', 'salah', 'ibad…ôt'],
            
            // Oruc variations
            'oruc' => ['siyam', 'ruz…ô', 'oruc', 'oruclama'],
            'siyam' => ['oruc', 'siyam', 'ruz…ô'],
            
            // Q√ºsl variations
            'q√ºsl' => ['qusl', 'q√ºsl', 'b√∂y√ºk t…ôhar…ôt', 'tam yuyunma'],
            'qusl' => ['q√ºsl', 'qusl', 'b√∂y√ºk t…ôhar…ôt'],
            
            // T…ôy…ômm√ºm variations
            't…ôy…ômm√ºm' => ['teyemmum', 't…ôy…ômm√ºm', 'torpaqla t…ôhar…ôt'],
            'teyemmum' => ['t…ôy…ômm√ºm', 'teyemmum', 'torpaqla t…ôhar…ôt'],
            
            // General variations
            'nec…ô' => ['nec…ô', 'nece', 'nasƒ±l', 'kimi'],
            'almaq' => ['almaq', 'etm…ôk', 'yerin…ô yetirm…ôk'],
            'alƒ±nƒ±r' => ['alƒ±nƒ±r', 'edilir', 'yerin…ô yetirilir'],
        ];
        
        if (isset($variationMap[$term])) {
            $variations = $variationMap[$term];
        }
        
        // Add the original term
        $variations[] = $term;
        
        // Add common suffixes
        $suffixes = ['', 'ƒ±n', 'in', 'un', '√ºn', 'nƒ±n', 'nin', 'nun', 'n√ºn', 'ƒ±', 'i', 'u', '√º'];
        $baseTerm = $term;
        
        // Try to find base form
        foreach ($suffixes as $suffix) {
            if ($suffix && mb_substr($term, -mb_strlen($suffix)) === $suffix) {
                $baseTerm = mb_substr($term, 0, -mb_strlen($suffix));
                $variations[] = $baseTerm;
            }
        }
        
        return array_unique($variations);
    }
    
    /**
     * Override the main search method with enhanced understanding
     */
    protected function getUrlTrainedContent(string $query): string
    {
        try {
            // Use enhanced keyword extraction
            $keywords = $this->extractSmartKeywords($query);
            $exactPhrase = trim($query);
            
            // Also extract key concept (e.g., "d…ôst…ômaz" from "salam d…ôst…ômaz nec…ô alƒ±nƒ±r?")
            $keyConcept = $this->extractKeyConcept($query);
            
            Log::info('üîç ENHANCED URL SEARCH', [
                'original_query' => $query,
                'key_concept' => $keyConcept,
                'smart_keywords' => array_slice($keywords, 0, 5),
                'exact_phrase' => $exactPhrase
            ]);
            
            // Search strategy with key concept priority
            $urlKnowledge = KnowledgeBase::where('is_active', true)
                ->whereNotNull('source_url')
                ->where('source_url', '!=', '')
                ->where(function ($q) use ($keyConcept, $keywords, $exactPhrase) {
                    // TIER 1: Key concept match (highest priority)
                    if ($keyConcept) {
                        $q->where(function($concept) use ($keyConcept) {
                            $concept->where('title', 'LIKE', "%{$keyConcept}%")
                                   ->orWhere('content', 'LIKE', "%{$keyConcept}%");
                        });
                    }
                    
                    // TIER 2: Important keywords
                    foreach (array_slice($keywords, 0, 3) as $keyword) {
                        $q->orWhere(function($kw) use ($keyword) {
                            $kw->where('title', 'LIKE', "%{$keyword}%")
                               ->orWhere('content', 'LIKE', "%{$keyword}%");
                        });
                    }
                    
                    // TIER 3: Any keyword match
                    foreach ($keywords as $keyword) {
                        $q->orWhere('title', 'LIKE', "%{$keyword}%")
                          ->orWhere('content', 'LIKE', "%{$keyword}%");
                    }
                })
                ->orderByRaw('CASE 
                    WHEN title LIKE ? THEN 1 
                    WHEN content LIKE ? THEN 2
                    ELSE 3 END', 
                    ["%{$keyConcept}%", "%{$keyConcept}%"])
                ->limit(3)
                ->get();
            
            Log::info('URL SEARCH RESULTS', [
                'found_items' => $urlKnowledge->count(),
                'titles' => $urlKnowledge->pluck('title')->toArray()
            ]);
            
            if ($urlKnowledge->isEmpty()) {
                return '';
            }
            
            $context = "URL TRAƒ∞Nƒ∞NG M∆èLUMATLARI (PRIORITET 1):\n\n";
            foreach ($urlKnowledge as $item) {
                $context .= "BA≈ûLIQ: {$item->title}\n";
                $context .= "M∆èZMUN: {$item->content}\n";
                $sourceUrl = '';
                try {
                    $sourceUrl = $item->source_url ?? $item->source ?? 'N/A';
                } catch (\Exception $e) {
                    $sourceUrl = $item->source ?? 'N/A';
                }
                $context .= "M∆èNB∆è LINK: {$sourceUrl}\n";
                $context .= "KATEQORƒ∞YA: {$item->category}\n\n";
            }
            
            return $context;
            
        } catch (Exception $e) {
            Log::error('Enhanced URL search error', ['error' => $e->getMessage()]);
            return parent::getUrlTrainedContent($query);
        }
    }
    
    /**
     * Extract the key concept from a query
     */
    protected function extractKeyConcept(string $query): ?string
    {
        $query = mb_strtolower($query, 'UTF-8');
        
        // Priority Islamic concepts
        $concepts = [
            'd…ôst…ômaz', 'destemaz', 'abdest',
            'q√ºsl', 'qusl', 'qusul',
            't…ôy…ômm√ºm', 'teyemmum',
            'namaz', 'salat', 'salah',
            'oruc', 'siyam', 'ruz…ô',
            'z…ôkat', 'zekat',
            'h…ôcc', 'hecc', 'hac',
            'quran', 'kuran', 'koran',
            't…ôhar…ôt', 'teharet', 'paklƒ±q',
            'n…ôcas…ôt', 'necaset', 'murdarlƒ±q',
            'qibl…ô', 'qible', 'kible',
            'camaat', 'c…ôma…ôt', 'cemaat',
            'c√ºm…ô', 'cume', 'cuma',
            'fitr…ô', 'fitre', 'fitir',
            'q…ôza', 'qeza', 'kaza',
            'niyy…ôt', 'niyyet', 'niyet'
        ];
        
        foreach ($concepts as $concept) {
            if (mb_stripos($query, $concept) !== false) {
                return $concept;
            }
        }
        
        return null;
    }
}